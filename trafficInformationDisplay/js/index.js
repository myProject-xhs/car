
// 时间区间数组
let date = []
// 获取时间区间
function getDateExtent() {
  var t = 0;
  var min = 0;
  for (var i = 0; i < 288; i++) {
    if (min == 60)
      t += 1;
    if (min >= 60)
      min = min - 60;
    date.push([padStart(t), padStart(min)].join(':'))
    min += 5;
  }
  return date
}
getDateExtent()
//  补零
function padStart(str) {
  return (str + '').padStart(2, 0)
}
// 获取最大值
function getMax(arr) {
  if (!arr) return 0
  return Math.max.apply(null, arr)
}
var data = [79.46, 120.26, 81.57, 71.93, 81.05, 71.02, 68.30, 64.52, 92.24, 79.64, 72.48, 58.83, 56.66, 73.16, 61.82, 67.90, 65.06, 68.75, 76.72, 53.80, 68.67, 57.68, 93.06, 84.97, 75.61, 84.18, 74.68, 79.83, 98.77, 74.70, 106.02, 90.04, 145.21, 77.16, 88.02, 119.45, 92.67, 121.87, 94.54, 124.85, 129.13, 77.16, 89.17, 97.68, 78.97, 116.28, 94.43, 87.52, 88.63, 75.24, 88.61, 119.26, 92.34, 114.53, 110.84, 149.92, 154.42, 255.80, 293.16, 241.16, 331.36, 391.19, 461.12, 321.60, 753.97, 605.31, 638.46, 705.88, 742.54, 662.51, 664.09, 688.70, 708.35, 926.03, 814.73, 905.22, 844.06, 807.36, 776.61, 836.51, 828.24, 837.93, 918.76, 865.64, 779.51, 891.92, 712.49, 838.01, 928.72, 905.72, 842.42, 884.26, 879.08, 858.95, 756.86, 792.16, 807.91, 834.54, 720.21, 770.23, 623.95, 753.33, 749.31, 847.97, 890.72, 765.55, 854.37, 753.16, 778.66, 842.13, 889.03, 768.33, 815.82, 814.20, 840.68, 839.81, 785.66, 868.41, 834.84, 885.99, 933.51, 862.85, 856.74, 878.94, 838.32, 865.94, 894.83, 800.79, 845.52, 816.17, 843.78, 815.37, 881.87, 930.87, 853.44, 848.27, 825.13, 784.07, 789.34, 787.61, 760.21, 733.82, 775.15, 741.08, 748.11, 714.75, 738.94, 742.90, 751.99, 755.25, 767.63, 793.20, 777.57, 773.10, 812.22, 758.09, 808.45, 769.00, 802.60, 754.24, 817.53, 793.13, 790.65, 808.75, 795.22, 814.58, 784.27, 767.11, 784.25, 808.75, 838.59, 790.25, 845.04, 778.54, 842.44, 827.72, 826.72, 818.02, 827.46, 827.89, 817.06, 807.58, 795.91, 800.88, 848.84, 794.71, 815.34, 835.21, 832.05, 810.19, 823.04, 797.58, 799.83, 869.47, 848.12, 921.23, 876.74, 896.25, 888.32, 835.90, 884.37, 921.71, 967.97, 957.34, 973.97, 884.74, 874.16, 879.27, 902.82, 874.01, 845.16, 906.48, 829.90, 797.54, 807.65, 790.60, 723.71, 788.88, 708.04, 747.89, 678.91, 636.96, 640.81, 625.93, 668.21, 601.15, 558.36, 549.66, 537.15, 549.14, 515.70, 504.80, 487.27, 495.00, 480.49, 504.33, 451.54, 474.48, 509.73, 570.65, 531.78, 489.89, 509.01, 503.34, 491.06, 541.72, 505.91, 402.53, 455.07, 490.92, 455.21, 357.18, 373.31, 362.71, 371.48, 367.11, 392.93, 322.39, 328.57, 365.42, 351.04, 283.32, 284.62, 268.58, 280.95, 271.55, 238.46, 249.40, 272.10, 217.70, 226.95, 172.15, 173.85, 224.26, 157.87, 206.59, 163.00, 166.73, 182.00, 149.17, 140.62, 167.25, 140.35, 118.40, 152.51, 109.15, 116.44, 95.14];
x1 = document.getElementById("fir");
x2 = document.getElementById("sec");
var t = new Date().getHours();
var m = new Date().getMinutes();
var i = t * 12 + Math.round(m / 5) - 1;
x1.innerHTML = data[i];
x2.innerHTML = data[i + 1];
setInterval(function () {
  var t = new Date().getHours();
  var m = new Date().getMinutes();
  var i = t * 12 + Math.round(m / 5);
  x1.innerHTML = data[i];
  x2.innerHTML = data[i + 1];
}, 60000);

// 折线图定制
(function () {
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.querySelector(".line .chart"));
  var data = [88.36, 98.20, 90.56, 67.51, 66.22, 68.91, 68.05, 72.97, 63.96, 83.03, 58.05, 60.98, 69.60, 54.69, 79.45, 55.95, 70.00, 94.37, 56.18, 72.08, 59.75, 81.85, 92.06, 48.41, 98.10, 76.99, 92.81, 80.47, 101.79, 94.17, 90.24, 94.63, 82.00, 81.70, 92.32, 106.76, 113.81, 102.70, 107.74, 76.37, 68.33, 81.69, 104.67, 156.79, 94.56, 125.90, 67.17, 76.65, 79.76, 102.17, 100.59, 88.72, 113.17, 91.39, 114.26, 134.79, 184.04, 224.97, 331.88, 244.38, 291.09, 386.03, 434.02, 543.44, 639.19, 766.74, 812.09, 797.96, 828.95, 780.98, 902.72, 778.37, 928.18, 949.94, 861.10, 939.99, 941.18, 840.54, 948.23, 993.38, 913.94, 890.79, 999.41, 877.05, 876.00, 1000.78, 865.28, 904.79, 856.31, 928.22, 841.56, 862.46, 856.67, 812.88, 836.80, 867.54, 860.31, 901.68, 939.81, 819.27, 800.44, 815.04, 768.97, 733.15, 842.92, 841.89, 691.03, 848.20, 790.66, 781.11, 891.72, 799.68, 765.53, 819.89, 777.26, 847.50, 867.98, 871.77, 869.71, 844.70, 887.72, 794.76, 894.67, 812.61, 904.33, 872.61, 867.77, 846.42, 871.73, 883.68, 858.24, 856.76, 862.77, 798.44, 830.02, 1239.16, 906.58, 946.27, 841.02, 958.52, 847.65, 782.17, 774.82, 774.82, 747.35, 812.67, 759.42, 892.25, 834.20, 841.95, 883.19, 901.37, 847.81, 817.66, 876.49, 857.27, 853.32, 870.77, 888.13, 867.75, 899.80, 844.96, 842.33, 896.87, 842.88, 891.81, 837.60, 867.12, 862.70, 871.48, 888.77, 923.81, 858.13, 871.73, 894.05, 927.65, 897.99, 863.15, 943.66, 903.33, 921.12, 938.57, 922.70, 902.96, 890.04, 917.47, 918.76, 957.70, 892.89, 930.52, 864.79, 883.51, 972.52, 926.72, 939.10, 993.52, 996.75, 954.79, 958.86, 910.41, 959.34, 985.07, 940.93, 965.33, 952.89, 951.61, 959.93, 900.25, 919.87, 859.16, 976.92, 746.36, 896.02, 793.16, 835.97, 896.37, 883.76, 853.51, 837.15, 809.15, 840.99, 799.55, 795.67, 720.85, 755.07, 661.07, 687.44, 624.27, 653.84, 585.24, 612.89, 596.43, 613.31, 608.82, 556.91, 613.66, 557.81, 585.89, 567.48, 592.75, 575.11, 554.90, 507.09, 529.17, 503.72, 486.13, 527.54, 480.71, 488.84, 440.46, 444.96, 433.87, 430.48, 423.24, 471.58, 444.91, 407.21, 465.55, 402.86, 362.69, 319.32, 327.29, 302.13, 326.01, 294.26, 314.55, 299.86, 273.94, 301.46, 234.38, 262.42, 239.43, 232.79, 252.04, 193.28, 214.26, 158.23, 151.47, 158.57, 147.64, 142.06, 127.87, 108.81, 109.36, 123.97, 77.57, 97.22, 105.60];
  option = {
    tooltip: {
      trigger: 'axis',
      position: function (pt) {
        return [pt[0], '10%'];
      },
      formatter: '{b0}<br /> 车流量: {c0} 辆/分钟'
    },
    grid: {
      top: "10%"
    },
    xAxis: {
      type: 'category',
      boundaryGap: true,
      data: date,
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    yAxis: {
      type: 'value',
      boundaryGap: [0, '100%'],
      min: 0,
      max: Math.ceil(getMax(data) + 100),
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    dataZoom: [{
      type: 'inside',
      start: 0,
      end: 100
    }, {
      start: 0,
      end: 10,
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      }
    }],
    series: [
      {
        name: '车流量',
        show:false,
        type: 'line',
        smooth: true,
        symbol: 'none',
        sampling: 'average',
        itemStyle: {
          color: '#02a6b5'
        },
        areaStyle: {
          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
            offset: 0,
            color: 'rgb(255, 0, 0)'
          }, {
            offset: 1,
            color: '#02a6b5'
          }])
        },
        data: data
      }
    ]
  };
  // 3. 把配置和数据给实例对象
  myChart.setOption(option);

  // 重新把配置好的新数据给实例对象
  myChart.setOption(option);
  window.addEventListener("resize", function () {
    myChart.resize();
  });
})();

// 饼形图定制
(function () {
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.querySelector(".pie .chart"));

  option = {
    tooltip: {
      trigger: "item",
      formatter: "{a} <br/>{b}: {c} ({d}%)",
      position: function (p) {
        //其中p为当前鼠标的位置
        return [p[0] + 10, p[1] - 10];
      },
      formatter: '{b0}<br /> 车流量: {c0} 辆/分钟'
    },
    legend: {
      top: "90%",
      itemWidth: 10,
      itemHeight: 10,
      data: ["公交车", "私家车", "卡车", "出租车", "其他"],
      textStyle: {
        color: "rgba(255,255,255,.5)",
        fontSize: "12"
      }
    },
    series: [
      {
        name: "车型",
        type: "pie",
        center: ["50%", "42%"],
        radius: ["40%", "60%"],
        color: [
          "#065aab",
          "#066eab",
          "#0682ab",
          "#06f0ab",
          "#06a0ab"
        ],
        label: { show: true },
        labelLine: { show: false },
        data: [
          { value: 6, name: "公交车" },
          { value: 10, name: "私家车" },
          { value: 2, name: "卡车" },
          { value: 6, name: "出租车" },
          { value: 7, name: "其他" }
        ]
      }
    ]
  };

  // 使用刚指定的配置项和数据显示图表。

  myChart.setOption(option, true);
  window.addEventListener("resize", function () {
    myChart.resize();
  });
})();

(function () {
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.querySelector(".map .chart"));
  var data = [79.46, 120.26, 81.57, 71.93, 81.05, 71.02, 68.30, 64.52, 92.24, 79.64, 72.48, 58.83, 56.66, 73.16, 61.82, 67.90, 65.06, 68.75, 76.72, 53.80, 68.67, 57.68, 93.06, 84.97, 75.61, 84.18, 74.68, 79.83, 98.77, 74.70, 106.02, 90.04, 145.21, 77.16, 88.02, 119.45, 92.67, 121.87, 94.54, 124.85, 129.13, 77.16, 89.17, 97.68, 78.97, 116.28, 94.43, 87.52, 88.63, 75.24, 88.61, 119.26, 92.34, 114.53, 110.84, 149.92, 154.42, 255.80, 293.16, 241.16, 331.36, 391.19, 461.12, 321.60, 753.97, 605.31, 638.46, 705.88, 742.54, 662.51, 664.09, 688.70, 708.35, 926.03, 814.73, 905.22, 844.06, 807.36, 776.61, 836.51, 828.24, 837.93, 918.76, 865.64, 779.51, 891.92, 712.49, 838.01, 928.72, 905.72, 842.42, 884.26, 879.08, 858.95, 756.86, 792.16, 807.91, 834.54, 720.21, 770.23, 623.95, 753.33, 749.31, 847.97, 890.72, 765.55, 854.37, 753.16, 778.66, 842.13, 889.03, 768.33, 815.82, 814.20, 840.68, 839.81, 785.66, 868.41, 834.84, 885.99, 933.51, 862.85, 856.74, 878.94, 838.32, 865.94, 894.83, 800.79, 845.52, 816.17, 843.78, 815.37, 881.87, 930.87, 853.44, 848.27, 825.13, 784.07, 789.34, 787.61, 760.21, 733.82, 775.15, 741.08, 748.11, 714.75, 738.94, 742.90, 751.99, 755.25, 767.63, 793.20, 777.57, 773.10, 812.22, 758.09, 808.45, 769.00, 802.60, 754.24, 817.53, 793.13, 790.65, 808.75, 795.22, 814.58, 784.27, 767.11, 784.25, 808.75, 838.59, 790.25, 845.04, 778.54, 842.44, 827.72, 826.72, 818.02, 827.46, 827.89, 817.06, 807.58, 795.91, 800.88, 848.84, 794.71, 815.34, 835.21, 832.05, 810.19, 823.04, 797.58, 799.83, 869.47, 848.12, 921.23, 876.74, 896.25, 888.32, 835.90, 884.37, 921.71, 967.97, 957.34, 973.97, 884.74, 874.16, 879.27, 902.82, 874.01, 845.16, 906.48, 829.90, 797.54, 807.65, 790.60, 723.71, 788.88, 708.04, 747.89, 678.91, 636.96, 640.81, 625.93, 668.21, 601.15, 558.36, 549.66, 537.15, 549.14, 515.70, 504.80, 487.27, 495.00, 480.49, 504.33, 451.54, 474.48, 509.73, 570.65, 531.78, 489.89, 509.01, 503.34, 491.06, 541.72, 505.91, 402.53, 455.07, 490.92, 455.21, 357.18, 373.31, 362.71, 371.48, 367.11, 392.93, 322.39, 328.57, 365.42, 351.04, 283.32, 284.62, 268.58, 280.95, 271.55, 238.46, 249.40, 272.10, 217.70, 226.95, 172.15, 173.85, 224.26, 157.87, 206.59, 163.00, 166.73, 182.00, 149.17, 140.62, 167.25, 140.35, 118.40, 152.51, 109.15, 116.44, 95.14];
  option = {
    tooltip: {
      trigger: 'axis',
      position: function (pt) {
        return [pt[0], '10%'];
      },
      formatter: '{b0}<br /> 车流量: {c0} 辆/分钟'
    },
    grid: {
      bbottom: "50%"
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: date,
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    yAxis: {
      type: 'value',
      boundaryGap: [0, '100%'],
      min: 0,
      max: Math.ceil(getMax(data) + 100),
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    dataZoom: [{
      type: 'inside',
      start: 0,
      end: 100
    }, {
      start: 0,
      end: 10,
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      }
    }],
    series: [
      {
        name: '车流量',
        type: 'line',
        smooth: true,
        symbol: 'none',
        sampling: 'average',
        itemStyle: {
          color: '#02a6b5'
        },
        areaStyle: {
          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
            offset: 0,
            color: 'rgb(255, 0, 0)'
          }, {
            offset: 1,
            color: '#02a6b5'
          }])
        },
        data: data
      }
    ]
  };
  // 3. 把配置和数据给实例对象
  myChart.setOption(option);

  // 重新把配置好的新数据给实例对象
  myChart.setOption(option);
  window.addEventListener("resize", function () {
    myChart.resize();
  });
})();
// 学习进度柱状图模块
(function () {
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.querySelector(".bar1 .chart"));
  var data = [82.98, 73.54, 51.91, 132.55, 160.16, 147.52, 88.02, 49.62, 79.35, 88.85, 178.31, 139.62, 153.11, 95.50, 48.01, 69.65, 70.87, 64.47, 104.87, 94.93, 87.06, 61.89, 76.12, 81.42, 90.45, 111.08, 125.92, 90.00, 91.70, 93.44, 107.24, 136.82, 106.13, 108.87, 119.27, 88.42, 111.34, 113.39, 109.12, 134.47, 103.11, 123.09, 106.12, 120.47, 129.14, 106.68, 122.08, 98.00, 89.00, 137.48, 87.63, 85.66, 97.55, 85.75, 130.33, 113.53, 164.78, 178.79, 241.35, 209.66, 291.03, 338.19, 377.00, 778.10, 515.20, 658.35, 700.28, 760.98, 774.87, 802.92, 891.07, 901.75, 849.38, 975.48, 1004.46, 947.80, 920.13, 955.17, 859.01, 917.05, 868.21, 941.34, 946.50, 860.25, 828.09, 835.80, 894.25, 903.38, 913.47, 894.09, 877.94, 810.63, 837.70, 767.96, 774.34, 818.63, 823.30, 767.35, 819.64, 787.53, 838.63, 786.83, 860.69, 819.75, 886.48, 821.28, 809.48, 763.93, 783.79, 851.39, 866.83, 820.71, 768.94, 794.66, 803.61, 766.35, 784.40, 732.83, 777.44, 767.22, 776.34, 783.65, 785.86, 748.36, 760.32, 767.89, 776.59, 777.70, 779.47, 727.09, 731.58, 749.47, 756.48, 727.70, 705.41, 700.68, 688.30, 684.72, 640.89, 682.13, 700.14, 675.52, 678.03, 657.12, 700.70, 707.22, 714.91, 729.63, 743.25, 784.11, 747.26, 761.07, 829.66, 722.93, 790.98, 778.07, 784.60, 732.42, 764.97, 761.54, 771.81, 765.23, 772.68, 767.23, 749.18, 757.61, 745.02, 740.77, 733.75, 783.95, 759.79, 769.24, 802.15, 784.97, 792.42, 834.82, 760.15, 805.79, 809.80, 771.10, 768.91, 795.83, 747.78, 766.82, 734.06, 742.27, 751.78, 728.02, 735.10, 706.42, 630.04, 726.95, 747.48, 824.39, 882.77, 868.51, 856.33, 782.42, 763.30, 841.14, 939.59, 905.19, 883.03, 901.97, 865.07, 851.95, 863.83, 897.58, 818.23, 894.19, 848.95, 789.79, 835.51, 774.12, 727.28, 756.86, 803.05, 807.39, 664.14, 677.43, 596.92, 637.87, 633.75, 550.93, 540.82, 556.07, 556.95, 519.13, 513.76, 508.44, 469.79, 471.54, 478.32, 448.10, 425.22, 432.64, 438.95, 410.56, 420.62, 447.59, 414.62, 448.55, 383.26, 411.08, 399.02, 436.66, 404.67, 396.23, 395.91, 381.19, 368.38, 384.26, 336.29, 319.91, 356.19, 354.79, 300.42, 287.45, 315.04, 286.72, 261.75, 255.83, 251.27, 235.78, 227.44, 197.83, 232.03, 180.12, 196.10, 171.21, 184.60, 166.19, 182.61, 177.17, 172.52, 162.99, 124.18, 137.83, 148.27, 137.66, 128.63, 116.66, 106.48, 104.89, 85.63, 93.53, 83.54, 89.06];
  option = {
    tooltip: {
      trigger: 'axis',
      position: function (pt) {
        return [pt[0], '10%'];
      },
      formatter: '{b0}<br /> 车流量: {c0} 辆/分钟'
    },
    grid: {
      top: "10%"
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: date,
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    yAxis: {
      type: 'value',
      boundaryGap: [0, '100%'],
      min: 0,
      max: Math.ceil(getMax(data) + 100),
      axisLabel: {
        color: "rgba(251, 249, 249, 1)"
      }
    },
    dataZoom: [{
      type: 'inside',
      start: 0,
      end: 100
    }, {
      start: 0,
      end: 10,
      handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
      handleSize: '80%',
      handleStyle: {
        color: '#fff',
        shadowBlur: 3,
        shadowColor: 'rgba(0, 0, 0, 0.6)',
        shadowOffsetX: 2,
        shadowOffsetY: 2
      }
    }],
    series: [
      {
        name: '车流量',
        type: 'line',
        smooth: true,
        symbol: 'none',
        sampling: 'average',
        itemStyle: {
          color: '#02a6b5'
        },
        areaStyle: {
          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
            offset: 0,
            color: 'rgb(255, 0, 0)'
          }, {
            offset: 1,
            color: '#02a6b5'
          }])
        },
        data: data
      }
    ]
  };

  // 使用刚指定的配置项和数据显示图表。
  myChart.setOption(option);
  window.addEventListener("resize", function () {
    myChart.resize();
  });
})();
// 折线图 优秀作品

(function () {
  // 基于准备好的dom，初始化echarts实例
  var myChart = echarts.init(document.querySelector(".line1 .chart"));

  option = {
    grid: {
      top: "10%",
      left: "22%",
      bottom: "10%"
    },
    toolbox: {
      show: true,
      feature: {
        restore: { show: false },
        saveAsImage: { show: false }
      }
    },
    series: [
      {
        name: '速度',
        type: 'gauge',
        z: 3,
        min: 0,
        max: Math.ceil(getMax(data) + 100),
        splitNumber: 6,
        radius: '120%',
        axisLine: {            // 坐标轴线
          lineStyle: {       // 属性lineStyle控制线条样式
            width: 10
          }
        },
        axisTick: {            // 坐标轴小标记
          length: 15,        // 属性length控制线长
          lineStyle: {       // 属性lineStyle控制线条样式
            color: 'auto'
          }
        },
        splitLine: {           // 分隔线
          length: 20,         // 属性length控制线长
          lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
            color: 'auto'
          }
        },
        axisLabel: {
          backgroundColor: 'auto',
          borderRadius: 2,
          color: '#eee',
          padding: 1,
          textShadowBlur: 2,
          textShadowOffsetX: 1,
          textShadowOffsetY: 1,
          textShadowColor: '#222'
        },
        title: {
          // 其余属性默认使用全局文本样式，详见TEXTSTYLE
          fontWeight: 'bolder',
          fontSize: 20,
          fontStyle: 'italic'
        },
        detail: {
          // 其余属性默认使用全局文本样式，详见TEXTSTYLE
          formatter: function (value) {
            value = (value + '').split('.');
            value.length < 2 && (value.push('00'));
            return ('00' + value[0]).slice(-2)
              + '.' + (value[1] + '00').slice(0, 2);
          },
          fontWeight: 'bolder',
          borderRadius: 3,
          backgroundColor: '#444',
          borderColor: '#aaa',
          shadowBlur: 5,
          shadowColor: '#333',
          shadowOffsetX: 0,
          shadowOffsetY: 3,
          borderWidth: 2,
          textBorderColor: '#000',
          textBorderWidth: 3,
          textShadowBlur: 2,
          textShadowColor: '#fff',
          textShadowOffsetX: 0,
          textShadowOffsetY: 0,
          fontFamily: 'Arial',
          width: 60,
          color: '#eee',
          rich: {}
        },
        data: [{ value: 40, name: 'km/h' }]
      },

    ]
  };
  option.series[0].data[0].value = (Math.random() * 20 + 20).toFixed(2) - 0;
  myChart.setOption(option, true);
  window.addEventListener("resize", function () {
    myChart.resize();
  });
  setInterval(function () {
    option.series[0].data[0].value = (Math.random() * 20 + 20).toFixed(2) - 0;
    myChart.setOption(option, true);
    window.addEventListener("resize", function () {
      myChart.resize();
    });
  }, 5000);
})();

$('#tabs').on('click','span',function(e) {
  console.log(e)
})